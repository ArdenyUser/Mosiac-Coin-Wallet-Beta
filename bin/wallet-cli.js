#!/usr/bin/env node
"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const prompt = require('prompt');
const fs = require('fs');
const os = require('os');
const child_process = require("child_process");
const colors_1 = require("colors");
const safe_1 = require("colors/safe");
const nem_library_1 = require("nem-library");
const wallet_1 = require("../src/wallet/wallet");
const CFonts = require('cfonts');
const Spinner = require('cli-spinner').Spinner;
const args = process.argv.slice(2);
const homePath = `${os.homedir()}/cache-wallets`;
let defaultWalletPath;
if (args.length === 0) {
    CFonts.say('Cache', { colors: ['cyan'] });
    console.log(`Usage:

	cache wallet list
		Lists all of the wallets available in your cache-wallets directory
	
	cache wallet default <number>
		Choose the wallet you want to set as default ie 'cache wallet default 3'
	
	cache balance
		Gets your current wallet balance and public address
	
	cache send <amount> <address>
		Sends cache from your wallet to the specified address
	
	cache wallet create
		Guides you through creating a new cache wallet
	`);
    process.exit(1);
}
const downloadWallet = (wallet, address) => {
    console.log(colors_1.white(`\n\nDownloading wallet for your convenience.\n\nPlease store someplace safe. The private key is encrypted by your password.\n\nTo load this wallet on a new computer you would simply import the .wlt file into this app and enter your password and you'll be able to sign transactions.
	`));
    const addAbb = address.substring(0, 6);
    const stamp = new Date().toISOString().substring(0, 10);
    if (!fs.existsSync(homePath)) {
        fs.mkdirSync(homePath);
    }
    const path = `${homePath}/${addAbb}-${stamp}-cache.wlt`;
    fs.writeFile(path, wallet.writeWLTFile(), (_) => {
        console.log(safe_1.green(`\nDownloaded wallet to ${path}\n`));
    });
};
const createPwd = () => {
    console.log(colors_1.white(`\nPlease enter a unique password ${safe_1.yellow('(8 character minimum)')}.\n 
This password will be used to encrypt your private key and make working with your wallet easier.\n\n`));
    console.log(safe_1.red(`Store this password somewhere safe. If you lose or forget it you will never be able to transfer funds\n`));
    prompt.message = colors_1.white('Cache Wallet');
    prompt.start();
    prompt.get({
        properties: {
            password: {
                description: colors_1.white('Password'),
                hidden: true
            },
            confirmPass: {
                description: colors_1.white('Re-enter password'),
                hidden: true
            }
        }
    }, (_, result) => __awaiter(this, void 0, void 0, function* () {
        if (result.password !== result.confirmPass) {
            console.log(safe_1.magenta('\nPasswords do not match.\n\n'));
            createPwd();
        }
        else {
            const wallet = wallet_1.createSimpleWallet(result.password);
            const pass = new nem_library_1.Password(result.password);
            const account = wallet.open(pass);
            const address = account.address.pretty();
            console.log(safe_1.green('\nCache wallet successfully created.\n'));
            console.log(colors_1.white('You can now start sending and receiving cache!\n'));
            console.log(colors_1.white(`\nCache Public Address:`));
            console.log(safe_1.yellow(`${address}`));
            console.log(colors_1.white(`\nPrivate Key:`));
            console.log(safe_1.yellow(`${account.privateKey}`));
            yield downloadWallet(wallet, address);
        }
    }));
};
const listWallets = () => {
    console.log(colors_1.white('Fetching wallets...\n'));
    loadWalletPaths(paths => {
        if (paths.length === 0) {
            console.log(colors_1.white(`No wallets found. Create a new wallet or place an existing .wlt file
in ${homePath}\n`));
            process.exit(1);
        }
        for (let x = 0; x < paths.length; x++) {
            console.log(`${x} - ${paths[x]}`);
        }
        console.log('\n');
    });
};
const loadWalletPaths = (onLoaded) => {
    fs.readdir(homePath, (_, files) => {
        let paths = [];
        for (let x = 0; x < files.length; x++) {
            if (files[x].includes('default')) {
                defaultWalletPath = files[x];
            }
            const str = files[x].substring(files[x].length - 3, files[x].length);
            if (str === 'wlt') {
                paths.push(files[x]);
            }
        }
        onLoaded(paths);
    });
};
const attemptWalletOpen = (wallet) => {
    return new Promise((resolve, reject) => {
        prompt.start();
        prompt.get({
            properties: {
                password: {
                    description: colors_1.white('Password'),
                    hidden: true
                }
            }
        }, (_, result) => {
            const pass = new nem_library_1.Password(result);
            try {
                resolve(wallet.open(pass));
            }
            catch (err) {
                console.log(safe_1.red(`${err}`));
                console.log(colors_1.white('Please try again'));
                reject();
            }
        });
    });
};
const loadWallet = () => {
    loadWalletPaths(_ => { });
    child_process.execSync('sleep 1');
    const fullPath = `${homePath}/${defaultWalletPath}`;
    const contents = fs.readFileSync(fullPath, 'utf8');
    return nem_library_1.SimpleWallet.readFromWLT(contents);
};
const getBalance = () => __awaiter(this, void 0, void 0, function* () {
    const wallet = loadWallet();
    try {
        const account = yield attemptWalletOpen(wallet);
        const spinner = new Spinner('processing.. %s');
        spinner.setSpinnerString(9);
        spinner.start();
        const cacheMosaic = yield wallet_1.getAccountBalance(account);
        const balance = cacheMosaic ? cacheMosaic.quantity : 0;
        spinner.stop();
        const bal = Math.round(balance * 1e6) / 1e6;
        console.log(safe_1.green('\n\nCache Balance: '));
        console.log(colors_1.white(`${bal}\n`));
    }
    catch (err) {
        if (err) {
            console.log(err);
        }
        getBalance();
    }
});
const setDefaultWallet = (walletIndex) => {
    loadWalletPaths(paths => {
        if (paths[walletIndex].includes('default'))
            return;
        for (let x = 0; x < paths.length; x++) {
            let newPath = paths[x].replace('default-', '');
            newPath = `${homePath}/${newPath}`;
            fs.rename(`${homePath}/${paths[x]}`, newPath, (_) => { });
        }
        setTimeout(() => {
            fs.rename(`${homePath}/${paths[walletIndex]}`, `${homePath}/default-${paths[walletIndex]}`);
        }, 800);
    });
};
const main = () => {
    loadWalletPaths(paths => {
        if (args[0] === 'wallet') {
            if (args[1] === 'create') {
                createPwd();
            }
            else if (args[1] === 'balance') {
                if (!defaultWalletPath) {
                    return console.log(safe_1.yellow(`\nYou must first set a default wallet. Run ${colors_1.white('cache wallet list')} then ${colors_1.white('cache wallet default <number>')}\n`));
                }
                getBalance();
            }
            else if (args[1] === 'list') {
                listWallets();
            }
            else if (args[1] === 'default') {
                const idx = parseInt(args[2]);
                if (isNaN(idx)) {
                    console.log(safe_1.red('Invalid wallet index. Must be an Integer'));
                }
                else {
                    if (idx >= 0 && idx < paths.length) {
                        setDefaultWallet(idx);
                    }
                    else {
                        console.log(safe_1.red('Invalid wallet selection'));
                    }
                }
            }
        }
    });
};
main();
process.on('uncaughtException', function (err) {
    console.log(err);
    console.log('Wallet closed');
    process.exit(1);
});
//# sourceMappingURL=data:application/json;base64,