#!/usr/bin/env node
"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const cli_spinner_1 = require("cli-spinner");
const colors_1 = require("colors");
const safe_1 = require("colors/safe");
const CFonts = require('cfonts');
const prompt = require('prompt');
const fs = require('fs');
const os = require('os');
const nem_library_1 = require("nem-library");
const wallet_1 = require("../src/wallet");
const mosaicSettings = require('../src/mosaic-settings.json');
const MOSAIC_NAME = mosaicSettings.mosaic_name;
const args = process.argv.slice(2);
const PATH_HOME = `${os.homedir()}/${MOSAIC_NAME}-wallets`;
const PATH_WALLET = `${PATH_HOME}/${MOSAIC_NAME}-wallet.wlt`;
let selectedAccount;
if (args.length === 0) {
    CFonts.say(`${MOSAIC_NAME}`, { colors: ['cyan'] });
    console.log(`Usage:

	${MOSAIC_NAME} balance
		Gets your current wallet balance and public address
	
	${MOSAIC_NAME} send <amount> <address>
		Sends ${MOSAIC_NAME} from your wallet to the specified address
	
	${MOSAIC_NAME} wallet create
		Guides you through creating a new ${MOSAIC_NAME} wallet
	`);
    process.exit(1);
}
const downloadWallet = (wallet) => {
    console.log(colors_1.white(`\n\nDownloading wallet for your convenience.\n\nPlease store someplace safe. The private key is encrypted by your password.\n\nTo load this wallet on a new computer you would simply import the .wlt file into this app and enter your password and you'll be able to sign transactions.
	`));
    if (!fs.existsSync(PATH_HOME)) {
        fs.mkdirSync(PATH_HOME);
    }
    let fullPath = PATH_WALLET;
    if (fs.existsSync(fullPath)) {
        const stamp = new Date().toISOString();
        fullPath = `${PATH_HOME}/${stamp}-${MOSAIC_NAME}-wallet.wlt`;
    }
    fs.writeFileSync(fullPath, wallet.writeWLTFile());
    console.log(safe_1.green(`Downloaded wallet to ${fullPath}`));
};
const createPwd = () => {
    console.log(colors_1.white(`\nPlease enter a unique password ${safe_1.yellow('(8 character minimum)')}.\n 
This password will be used to encrypt your private key and make working with your wallet easier.\n\n`));
    console.log(safe_1.red(`Store this password somewhere safe. If you lose or forget it you will never be able to transfer funds\n`));
    prompt.message = colors_1.white(`${MOSAIC_NAME} wallet`);
    prompt.start();
    prompt.get({
        properties: {
            password: {
                description: colors_1.white('Password'),
                hidden: true
            },
            confirmPass: {
                description: colors_1.white('Re-enter password'),
                hidden: true
            }
        }
    }, (_, result) => __awaiter(this, void 0, void 0, function* () {
        if (result.password !== result.confirmPass) {
            console.log(safe_1.magenta('\nPasswords do not match.\n\n'));
            createPwd();
        }
        else {
            const wallet = wallet_1.createSimpleWallet(result.password);
            const pass = new nem_library_1.Password(result.password);
            const account = wallet.open(pass);
            const address = account.address.pretty();
            console.log(safe_1.green(`${MOSAIC_NAME} wallet successfully created.`));
            console.log(colors_1.white(`You can now start sending and receiving ${MOSAIC_NAME}!`));
            console.log(colors_1.white(`\n${MOSAIC_NAME} Public Address:`));
            console.log(safe_1.yellow(`${address}`));
            console.log(colors_1.white(`\nPrivate Key:`));
            console.log(safe_1.yellow(`${account.privateKey}`));
            yield downloadWallet(wallet);
        }
    }));
};
const attemptWalletOpen = (wallet) => {
    return new Promise((resolve, reject) => {
        prompt.message = colors_1.white('wallet login');
        prompt.start();
        prompt.get({
            properties: {
                password: {
                    description: colors_1.white('Password'),
                    hidden: true
                }
            }
        }, (_, result) => {
            const pass = new nem_library_1.Password(result.password);
            try {
                resolve(wallet.open(pass));
            }
            catch (err) {
                console.log(safe_1.red(`${err}`));
                console.log(colors_1.white('Please try again'));
                reject();
            }
        });
    });
};
const loadWallet = () => {
    const contents = fs.readFileSync(PATH_WALLET);
    return nem_library_1.SimpleWallet.readFromWLT(contents);
};
const printBalance = (onBalance) => __awaiter(this, void 0, void 0, function* () {
    const wallet = loadWallet();
    try {
        const account = yield attemptWalletOpen(wallet);
        selectedAccount = account;
        console.log('\n');
        console.log(`\n${colors_1.white('Public Address:')} ${colors_1.white(account.address.pretty())}\n`);
        const spinner = new cli_spinner_1.Spinner(safe_1.yellow('Fetching balance... %s'));
        spinner.setSpinnerString(0);
        spinner.start();
        const balances = yield wallet_1.getAccountBalances(account);
        const mosaic = yield wallet_1.mosaicBalance(balances);
        const xem = yield wallet_1.xemBalance(balances);
        spinner.stop();
        const bal = (mosaic / 1e6).toString();
        const xemBal = (xem / 1e6).toString();
        console.log('\n');
        console.log(`\n${colors_1.white('XEM Balance:')} ${colors_1.white(xemBal)}`);
        console.log(`\n${colors_1.white(`${MOSAIC_NAME} Balance:`)} ${colors_1.white(bal)}\n`);
        onBalance(mosaic / 1e6);
    }
    catch (err) {
        if (err) {
            console.log(err);
        }
    }
});
const main = () => __awaiter(this, void 0, void 0, function* () {
    if (args[0] === 'wallet') {
        if (args[1] === 'create') {
            createPwd();
        }
    }
    else {
        if (!fs.existsSync(PATH_WALLET)) {
            const file = `${MOSAIC_NAME}-wallet.wlt`;
            console.log(safe_1.red(`Cannot find default wallet. Please place a file named ${colors_1.white(file)} at this location: ${PATH_WALLET}`));
            process.exit(1);
        }
        if (args[0] === 'balance') {
            yield printBalance(_ => { });
        }
        else if (args[0] === 'send') {
            yield printBalance((balance) => __awaiter(this, void 0, void 0, function* () {
                const amt = parseFloat(args[1]);
                const address = args[2];
                if (isNaN(amt)) {
                    console.log(safe_1.red('Must provide a valid number with maximum of 6 digits ie 10.356784'));
                    process.exit(1);
                }
                if (!address) {
                    console.log(safe_1.red('Must provide a valid recipient address'));
                    process.exit(1);
                }
                if (amt > balance) {
                    console.log(safe_1.red(`You don't have enough ${MOSAIC_NAME} to send`));
                    process.exit(1);
                }
                try {
                    const preTransaction = yield wallet_1.prepareTransfer(address, amt);
                    const xemFee = (preTransaction.fee / 1e6).toString();
                    console.log(colors_1.white('Transaction Details: \n'));
                    console.log(`Recipient:          ${safe_1.yellow(address)}\n`);
                    console.log(`${MOSAIC_NAME} to send:      ${safe_1.yellow(amt.toString())}\n`);
                    console.log(`XEM Fee:            ${safe_1.yellow(xemFee)}\n\n`);
                    console.log(`${colors_1.white('Would you like to proceed?\n')}`);
                    prompt.message = colors_1.white(`${MOSAIC_NAME} Transfer`);
                    prompt.start();
                    prompt.get({
                        properties: {
                            confirmation: {
                                description: safe_1.yellow('Proceed? ( y/n )')
                            }
                        }
                    }, (_, result) => __awaiter(this, void 0, void 0, function* () {
                        if (result.confirmation.toLowerCase() === 'y' || result.confirmation.toLowerCase() === 'yes') {
                            try {
                                const result = yield wallet_1.sendMosaic(address, amt, selectedAccount);
                                console.log(result);
                                console.log('\n\n');
                                console.log(colors_1.white('Transaction successfully announced to the NEM blockchain. Transaction could take some time. Come back here in 5 minutes to check your balance to ensure that the transaction was successfully sent\n'));
                            }
                            catch (err) {
                                console.log(safe_1.red(err));
                            }
                        }
                        else {
                            console.log('Transaction canceled');
                            process.exit(1);
                        }
                    }));
                }
                catch (err) {
                    console.log(`\n${err}\n`);
                }
            }));
        }
    }
});
main();
process.on('uncaughtException', function (err) {
    console.log(err);
    console.log('Wallet closed');
    process.exit(1);
});
//# sourceMappingURL=data:application/json;base64,