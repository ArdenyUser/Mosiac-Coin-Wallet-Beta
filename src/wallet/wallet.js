"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const nem_library_1 = require("nem-library");
const Observable_1 = require("rxjs/Observable");
nem_library_1.NEMLibrary.bootstrap(nem_library_1.NetworkTypes.TEST_NET);
const WALLET_NAME = 'cache wallet';
const namespace = 'devslopes';
const cache = 'cache';
const cacheId = new nem_library_1.MosaicId(namespace, cache);
const mosaicHttp = new nem_library_1.MosaicHttp();
const privateKey = process.env.PRIVATE_KEY;
exports.getWallet = (password) => {
    const pass = new nem_library_1.Password(password);
    const wallet = nem_library_1.SimpleWallet.createWithPrivateKey(WALLET_NAME, pass, privateKey);
    return wallet.open(pass);
};
exports.createSimpleWallet = (password) => {
    const pass = new nem_library_1.Password(password);
    return nem_library_1.SimpleWallet.create(WALLET_NAME, pass);
};
exports.sendCache = () => {
    Observable_1.Observable.from([cacheId])
        .flatMap(mosaic => mosaicHttp.getMosaicTransferableWithAmount(mosaic, 10))
        .toArray()
        .map(mosaics => nem_library_1.TransferTransaction.createWithMosaics(nem_library_1.TimeWindow.createWithDeadline(), new nem_library_1.Address('blah'), mosaics, nem_library_1.EmptyMessage));
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2FsbGV0LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsid2FsbGV0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsNkNBR3FCO0FBQ3JCLGdEQUE2QztBQUM3Qyx3QkFBVSxDQUFDLFNBQVMsQ0FBQywwQkFBWSxDQUFDLFFBQVEsQ0FBQyxDQUFDO0FBRTVDLE1BQU0sV0FBVyxHQUFHLGNBQWMsQ0FBQztBQUduQyxNQUFNLFNBQVMsR0FBRyxXQUFXLENBQUM7QUFDOUIsTUFBTSxLQUFLLEdBQUcsT0FBTyxDQUFDO0FBQ3RCLE1BQU0sT0FBTyxHQUFHLElBQUksc0JBQVEsQ0FBQyxTQUFTLEVBQUUsS0FBSyxDQUFDLENBQUM7QUFDL0MsTUFBTSxVQUFVLEdBQUcsSUFBSSx3QkFBVSxFQUFFLENBQUM7QUFFcEMsTUFBTSxVQUFVLEdBQVcsT0FBTyxDQUFDLEdBQUcsQ0FBQyxXQUFXLENBQUM7QUFFdEMsUUFBQSxTQUFTLEdBQUcsQ0FBQyxRQUFnQixFQUFXLEVBQUU7SUFDdEQsTUFBTSxJQUFJLEdBQUcsSUFBSSxzQkFBUSxDQUFDLFFBQVEsQ0FBQyxDQUFDO0lBQ3BDLE1BQU0sTUFBTSxHQUFHLDBCQUFZLENBQUMsb0JBQW9CLENBQUMsV0FBVyxFQUFFLElBQUksRUFBRSxVQUFVLENBQUMsQ0FBQztJQUNoRixNQUFNLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztBQUMxQixDQUFDLENBQUM7QUFFVyxRQUFBLGtCQUFrQixHQUFHLENBQUMsUUFBZ0IsRUFBZ0IsRUFBRTtJQUNwRSxNQUFNLElBQUksR0FBRyxJQUFJLHNCQUFRLENBQUMsUUFBUSxDQUFDLENBQUM7SUFDcEMsTUFBTSxDQUFDLDBCQUFZLENBQUMsTUFBTSxDQUFDLFdBQVcsRUFBRSxJQUFJLENBQUMsQ0FBQztBQUMvQyxDQUFDLENBQUM7QUFFVyxRQUFBLFNBQVMsR0FBRyxHQUFHLEVBQUU7SUFDN0IsdUJBQVUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQztTQUN4QixPQUFPLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxVQUFVLENBQUMsK0JBQStCLENBQUMsTUFBTSxFQUFFLEVBQUUsQ0FBQyxDQUFDO1NBQ3pFLE9BQU8sRUFBRTtTQUNULEdBQUcsQ0FBQyxPQUFPLENBQUMsRUFBRSxDQUFDLGlDQUFtQixDQUFDLGlCQUFpQixDQUNwRCx3QkFBVSxDQUFDLGtCQUFrQixFQUFFLEVBQy9CLElBQUkscUJBQU8sQ0FBQyxNQUFNLENBQUMsRUFDbkIsT0FBTyxFQUNQLDBCQUFZLENBQUMsQ0FBQyxDQUFBO0FBRWpCLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG5cdEFjY291bnQsIEFkZHJlc3MsIEVtcHR5TWVzc2FnZSwgTW9zYWljSHR0cCwgTW9zYWljSWQsIE5FTUxpYnJhcnksIE5ldHdvcmtUeXBlcywgUGFzc3dvcmQsIFNpbXBsZVdhbGxldCwgVGltZVdpbmRvdyxcblx0VHJhbnNmZXJUcmFuc2FjdGlvblxufSBmcm9tICduZW0tbGlicmFyeSc7XG5pbXBvcnQgeyBPYnNlcnZhYmxlIH0gZnJvbSAncnhqcy9PYnNlcnZhYmxlJztcbk5FTUxpYnJhcnkuYm9vdHN0cmFwKE5ldHdvcmtUeXBlcy5URVNUX05FVCk7XG5cbmNvbnN0IFdBTExFVF9OQU1FID0gJ2NhY2hlIHdhbGxldCc7XG5kZWNsYXJlIGxldCBwcm9jZXNzOiBhbnk7XG5cbmNvbnN0IG5hbWVzcGFjZSA9ICdkZXZzbG9wZXMnO1xuY29uc3QgY2FjaGUgPSAnY2FjaGUnO1xuY29uc3QgY2FjaGVJZCA9IG5ldyBNb3NhaWNJZChuYW1lc3BhY2UsIGNhY2hlKTtcbmNvbnN0IG1vc2FpY0h0dHAgPSBuZXcgTW9zYWljSHR0cCgpO1xuXG5jb25zdCBwcml2YXRlS2V5OiBzdHJpbmcgPSBwcm9jZXNzLmVudi5QUklWQVRFX0tFWTtcblxuZXhwb3J0IGNvbnN0IGdldFdhbGxldCA9IChwYXNzd29yZDogc3RyaW5nKTogQWNjb3VudCA9PiB7XG5cdGNvbnN0IHBhc3MgPSBuZXcgUGFzc3dvcmQocGFzc3dvcmQpO1xuXHRjb25zdCB3YWxsZXQgPSBTaW1wbGVXYWxsZXQuY3JlYXRlV2l0aFByaXZhdGVLZXkoV0FMTEVUX05BTUUsIHBhc3MsIHByaXZhdGVLZXkpO1xuXHRyZXR1cm4gd2FsbGV0Lm9wZW4ocGFzcyk7XG59O1xuXG5leHBvcnQgY29uc3QgY3JlYXRlU2ltcGxlV2FsbGV0ID0gKHBhc3N3b3JkOiBzdHJpbmcpOiBTaW1wbGVXYWxsZXQgPT4ge1xuXHRjb25zdCBwYXNzID0gbmV3IFBhc3N3b3JkKHBhc3N3b3JkKTtcblx0cmV0dXJuIFNpbXBsZVdhbGxldC5jcmVhdGUoV0FMTEVUX05BTUUsIHBhc3MpO1xufTtcblxuZXhwb3J0IGNvbnN0IHNlbmRDYWNoZSA9ICgpID0+IHtcblx0T2JzZXJ2YWJsZS5mcm9tKFtjYWNoZUlkXSlcblx0XHQuZmxhdE1hcChtb3NhaWMgPT4gbW9zYWljSHR0cC5nZXRNb3NhaWNUcmFuc2ZlcmFibGVXaXRoQW1vdW50KG1vc2FpYywgMTApKVxuXHRcdC50b0FycmF5KClcblx0XHQubWFwKG1vc2FpY3MgPT4gVHJhbnNmZXJUcmFuc2FjdGlvbi5jcmVhdGVXaXRoTW9zYWljcyhcblx0XHRcdFRpbWVXaW5kb3cuY3JlYXRlV2l0aERlYWRsaW5lKCksXG5cdFx0XHRuZXcgQWRkcmVzcygnYmxhaCcpLFxuXHRcdFx0bW9zYWljcyxcblx0XHRcdEVtcHR5TWVzc2FnZSkpXG5cbn07Il19