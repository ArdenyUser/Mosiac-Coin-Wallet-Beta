"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const nem_library_1 = require("nem-library");
const Observable_1 = require("rxjs/Observable");
const NETWORK = nem_library_1.NetworkTypes.TEST_NET;
nem_library_1.NEMLibrary.bootstrap(NETWORK);
const WALLET_NAME = 'cache wallet';
const namespace = 'devslopes';
const cache = 'cache';
const cacheId = new nem_library_1.MosaicId(namespace, cache);
const mosaicHttp = new nem_library_1.MosaicHttp();
exports.getAccountBalances = (account) => {
    return new Promise((resolve, reject) => {
        const accountHttp = new nem_library_1.AccountHttp();
        accountHttp.getMosaicOwnedByAddress(account.address).subscribe(mosaics => {
            resolve(mosaics);
        }, error => {
            reject(error);
        });
    });
};
exports.cacheBalance = (balances) => {
    const cacheMosaic = balances.find((mosaic) => {
        return mosaic.mosaicId.name === cache;
    });
    if (!cacheMosaic)
        return 0;
    return cacheMosaic.quantity;
};
exports.xemBalance = (balances) => {
    const xemMosaic = balances.find((mosaic) => {
        return mosaic.mosaicId.name === 'xem';
    });
    if (!xemMosaic)
        return 0;
    return xemMosaic.quantity;
};
exports.createSimpleWallet = (password) => {
    const pass = new nem_library_1.Password(password);
    return nem_library_1.SimpleWallet.create(WALLET_NAME, pass);
};
exports.prepareTransfer = (toAddress, amount) => {
    return new Promise((resolve, reject) => {
        mosaicHttp.getMosaicTransferableWithAmount(cacheId, amount)
            .subscribe(transferable => {
            resolve(nem_library_1.TransferTransaction.createWithMosaics(nem_library_1.TimeWindow.createWithDeadline(), new nem_library_1.Address(toAddress), [transferable], nem_library_1.EmptyMessage));
        }, error => {
            reject(error);
        });
    });
};
exports.sendCache = (toAddress, amount, account) => {
    return new Promise((resolve, reject) => {
        const transactionHttp = new nem_library_1.TransactionHttp();
        Observable_1.Observable.from([cacheId])
            .flatMap(mosaic => mosaicHttp.getMosaicTransferableWithAmount(mosaic, amount))
            .toArray()
            .map(mosaics => nem_library_1.TransferTransaction.createWithMosaics(nem_library_1.TimeWindow.createWithDeadline(), new nem_library_1.Address(toAddress), mosaics, nem_library_1.EmptyMessage))
            .map(transaction => account.signTransaction(transaction))
            .flatMap(signed => transactionHttp.announceTransaction(signed))
            .subscribe(result => {
            resolve(result);
        }, error => {
            reject(error);
        });
    });
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2FsbGV0LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsid2FsbGV0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsNkNBR3FCO0FBQ3JCLGdEQUE2QztBQUM3QyxNQUFNLE9BQU8sR0FBRywwQkFBWSxDQUFDLFFBQVEsQ0FBQztBQUN0Qyx3QkFBVSxDQUFDLFNBQVMsQ0FBQyxPQUFPLENBQUMsQ0FBQztBQUU5QixNQUFNLFdBQVcsR0FBRyxjQUFjLENBQUM7QUFDbkMsTUFBTSxTQUFTLEdBQUcsV0FBVyxDQUFDO0FBQzlCLE1BQU0sS0FBSyxHQUFHLE9BQU8sQ0FBQztBQUN0QixNQUFNLE9BQU8sR0FBRyxJQUFJLHNCQUFRLENBQUMsU0FBUyxFQUFFLEtBQUssQ0FBQyxDQUFDO0FBQy9DLE1BQU0sVUFBVSxHQUFHLElBQUksd0JBQVUsRUFBRSxDQUFDO0FBRXZCLFFBQUEsa0JBQWtCLEdBQUcsQ0FBQyxPQUFnQixFQUEwQixFQUFFO0lBQzlFLE1BQU0sQ0FBQyxJQUFJLE9BQU8sQ0FBZ0IsQ0FBQyxPQUFPLEVBQUUsTUFBTSxFQUFFLEVBQUU7UUFDckQsTUFBTSxXQUFXLEdBQUcsSUFBSSx5QkFBVyxFQUFFLENBQUM7UUFDdEMsV0FBVyxDQUFDLHVCQUF1QixDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsQ0FBQyxTQUFTLENBQUMsT0FBTyxDQUFDLEVBQUU7WUFDeEUsT0FBTyxDQUFDLE9BQU8sQ0FBQyxDQUFDO1FBQ2xCLENBQUMsRUFBRSxLQUFLLENBQUMsRUFBRTtZQUNWLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUNmLENBQUMsQ0FBQyxDQUFDO0lBQ0osQ0FBQyxDQUFDLENBQUM7QUFDSixDQUFDLENBQUM7QUFFVyxRQUFBLFlBQVksR0FBRyxDQUFDLFFBQXVCLEVBQVUsRUFBRTtJQUMvRCxNQUFNLFdBQVcsR0FBRyxRQUFRLENBQUMsSUFBSSxDQUFDLENBQUMsTUFBTSxFQUFFLEVBQUU7UUFDNUMsTUFBTSxDQUFDLE1BQU0s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LENBQUMsQ0FBQztRQUNmLENBQUMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQyxDQUFDLENBQUM7QUFDSixDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xuXHRBY2NvdW50LCBBZGRyZXNzLCBFbXB0eU1lc3NhZ2UsIE1vc2FpY0h0dHAsIE1vc2FpY0lkLCBORU1MaWJyYXJ5LCBOZXR3b3JrVHlwZXMsIFBhc3N3b3JkLCBTaW1wbGVXYWxsZXQsIFRpbWVXaW5kb3csXG5cdFRyYW5zZmVyVHJhbnNhY3Rpb24sIEFjY291bnRIdHRwLCBNb3NhaWMsIFRyYW5zYWN0aW9uSHR0cCwgTmVtQW5ub3VuY2VSZXN1bHRcbn0gZnJvbSAnbmVtLWxpYnJhcnknO1xuaW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gJ3J4anMvT2JzZXJ2YWJsZSc7XG5jb25zdCBORVRXT1JLID0gTmV0d29ya1R5cGVzLlRFU1RfTkVUO1xuTkVNTGlicmFyeS5ib290c3RyYXAoTkVUV09SSyk7XG5cbmNvbnN0IFdBTExFVF9OQU1FID0gJ2NhY2hlIHdhbGxldCc7XG5jb25zdCBuYW1lc3BhY2UgPSAnZGV2c2xvcGVzJztcbmNvbnN0IGNhY2hlID0gJ2NhY2hlJztcbmNvbnN0IGNhY2hlSWQgPSBuZXcgTW9zYWljSWQobmFtZXNwYWNlLCBjYWNoZSk7XG5jb25zdCBtb3NhaWNIdHRwID0gbmV3IE1vc2FpY0h0dHAoKTtcblxuZXhwb3J0IGNvbnN0IGdldEFjY291bnRCYWxhbmNlcyA9IChhY2NvdW50OiBBY2NvdW50KTogUHJvbWlzZTxBcnJheTxNb3NhaWM+PiA9PiB7XG5cdHJldHVybiBuZXcgUHJvbWlzZTxBcnJheTxNb3NhaWM+PigocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG5cdFx0Y29uc3QgYWNjb3VudEh0dHAgPSBuZXcgQWNjb3VudEh0dHAoKTtcblx0XHRhY2NvdW50SHR0cC5nZXRNb3NhaWNPd25lZEJ5QWRkcmVzcyhhY2NvdW50LmFkZHJlc3MpLnN1YnNjcmliZShtb3NhaWNzID0+IHtcblx0XHRcdHJlc29sdmUobW9zYWljcyk7XG5cdFx0fSwgZXJyb3IgPT4ge1xuXHRcdFx0cmVqZWN0KGVycm9yKTtcblx0XHR9KTtcblx0fSk7XG59O1xuXG5leHBvcnQgY29uc3QgY2FjaGVCYWxhbmNlID0gKGJhbGFuY2VzOiBBcnJheTxNb3NhaWM+KTogbnVtYmVyID0+IHtcblx0Y29uc3QgY2FjaGVNb3NhaWMgPSBiYWxhbmNlcy5maW5kKChtb3NhaWMpID0+IHtcblx0XHRyZXR1cm4gbW9zYWljLm1vc2FpY0lkLm5hbWUgPT09IGNhY2hlXG5cdH0pO1xuXHRpZiAoIWNhY2hlTW9zYWljKSByZXR1cm4gMDtcblx0cmV0dXJuIGNhY2hlTW9zYWljLnF1YW50aXR5O1xufTtcblxuZXhwb3J0IGNvbnN0IHhlbUJhbGFuY2UgPSAoYmFsYW5jZXM6IEFycmF5PE1vc2FpYz4pOiBudW1iZXIgPT4ge1xuXHRjb25zdCB4ZW1Nb3NhaWMgPSBiYWxhbmNlcy5maW5kKChtb3NhaWMpID0+IHtcblx0XHRyZXR1cm4gbW9zYWljLm1vc2FpY0lkLm5hbWUgPT09ICd4ZW0nXG5cdH0pO1xuXHRpZiAoIXhlbU1vc2FpYykgcmV0dXJuIDA7XG5cdHJldHVybiB4ZW1Nb3NhaWMucXVhbnRpdHk7XG59O1xuXG5leHBvcnQgY29uc3QgY3JlYXRlU2ltcGxlV2FsbGV0PSAocGFzc3dvcmQ6IHN0cmluZyk6IFNpbXBsZVdhbGxldCA9PiB7XG5cdGNvbnN0IHBhc3MgPSBuZXcgUGFzc3dvcmQocGFzc3dvcmQpO1xuXHRyZXR1cm4gU2ltcGxlV2FsbGV0LmNyZWF0ZShXQUxMRVRfTkFNRSwgcGFzcyk7XG59O1xuZXhwb3J0IGNvbnN0IHByZXBhcmVUcmFuc2ZlciA9ICh0b0FkZHJlc3M6IHN0cmluZywgYW1vdW50OiBudW1iZXIpOiBQcm9taXNlPFRyYW5zZmVyVHJhbnNhY3Rpb24+ID0+IHtcblx0cmV0dXJuIG5ldyBQcm9taXNlPFRyYW5zZmVyVHJhbnNhY3Rpb24+KChyZXNvbHZlLCByZWplY3QpID0+IHtcblx0XHRcdG1vc2FpY0h0dHAuZ2V0TW9zYWljVHJhbnNmZXJhYmxlV2l0aEFtb3VudChjYWNoZUlkLCBhbW91bnQpXG5cdFx0XHRcdC5zdWJzY3JpYmUodHJhbnNmZXJhYmxlID0+IHtcblx0XHRcdFx0XHRyZXNvbHZlKFRyYW5zZmVyVHJhbnNhY3Rpb24uY3JlYXRlV2l0aE1vc2FpY3MoXG5cdFx0XHRcdFx0XHRUaW1lV2luZG93LmNyZWF0ZVdpdGhEZWFkbGluZSgpLFxuXHRcdFx0XHRcdFx0bmV3IEFkZHJlc3ModG9BZGRyZXNzKSxcblx0XHRcdFx0XHRcdFt0cmFuc2ZlcmFibGVdLFxuXHRcdFx0XHRcdFx0RW1wdHlNZXNzYWdlKSlcblx0XHRcdFx0fSwgZXJyb3IgPT4ge1xuXHRcdFx0XHRcdHJlamVjdChlcnJvcik7XG5cdFx0XHRcdH0pO1xuXHR9KTtcbn07XG5leHBvcnQgY29uc3Qgc2VuZENhY2hlID0gKHRvQWRkcmVzczogc3RyaW5nLCBhbW91bnQ6IG51bWJlciwgYWNjb3VudDogQWNjb3VudCk6IFByb21pc2U8TmVtQW5ub3VuY2VSZXN1bHQ+ID0+IHtcblx0cmV0dXJuIG5ldyBQcm9taXNlPE5lbUFubm91bmNlUmVzdWx0PigocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG5cdFx0Y29uc3QgdHJhbnNhY3Rpb25IdHRwID0gbmV3IFRyYW5zYWN0aW9uSHR0cCgpO1xuXHRcdE9ic2VydmFibGUuZnJvbShbY2FjaGVJZF0pXG5cdFx0XHQuZmxhdE1hcChtb3NhaWMgPT4gbW9zYWljSHR0cC5nZXRNb3NhaWNUcmFuc2ZlcmFibGVXaXRoQW1vdW50KG1vc2FpYywgYW1vdW50KSlcblx0XHRcdC50b0FycmF5KClcblx0XHRcdC5tYXAobW9zYWljcyA9PiBUcmFuc2ZlclRyYW5zYWN0aW9uLmNyZWF0ZVdpdGhNb3NhaWNzKFxuXHRcdFx0XHRUaW1lV2luZG93LmNyZWF0ZVdpdGhEZWFkbGluZSgpLFxuXHRcdFx0XHRuZXcgQWRkcmVzcyh0b0FkZHJlc3MpLFxuXHRcdFx0XHRtb3NhaWNzLFxuXHRcdFx0XHRFbXB0eU1lc3NhZ2UpKVxuXHRcdFx0Lm1hcCh0cmFuc2FjdGlvbiA9PiBhY2NvdW50LnNpZ25UcmFuc2FjdGlvbih0cmFuc2FjdGlvbikpXG5cdFx0XHQuZmxhdE1hcChzaWduZWQgPT4gdHJhbnNhY3Rpb25IdHRwLmFubm91bmNlVHJhbnNhY3Rpb24oc2lnbmVkKSlcblx0XHRcdC5zdWJzY3JpYmUocmVzdWx0ID0+IHtcblx0XHRcdFx0cmVzb2x2ZShyZXN1bHQpO1xuXHRcdFx0fSwgZXJyb3IgPT4ge1xuXHRcdFx0XHRyZWplY3QoZXJyb3IpO1xuXHRcdFx0fSk7XG5cdH0pO1xufTtcbiJdfQ==