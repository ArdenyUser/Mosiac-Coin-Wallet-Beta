"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const nem_library_1 = require("nem-library");
const Observable_1 = require("rxjs/Observable");
nem_library_1.NEMLibrary.bootstrap(nem_library_1.NetworkTypes.TEST_NET);
const WALLET_NAME = 'cache wallet';
const namespace = 'devslopes';
const cache = 'cache';
const cacheId = new nem_library_1.MosaicId(namespace, cache);
const mosaicHttp = new nem_library_1.MosaicHttp();
exports.getAccountBalance = (account) => {
    return new Promise((resolve, reject) => {
        const accountHttp = new nem_library_1.AccountHttp();
        accountHttp.getMosaicOwnedByAddress(account.address).subscribe(mosaics => {
            const cacheMosaic = mosaics.find((mosaic) => {
                return mosaic.mosaicId.name === cache;
            });
            if (!cacheMosaic)
                resolve(null);
            resolve(cacheMosaic);
        }, error => {
            reject(error);
        });
    });
};
exports.createSimpleWallet = (password) => {
    const pass = new nem_library_1.Password(password);
    return nem_library_1.SimpleWallet.create(WALLET_NAME, pass);
};
exports.sendCache = () => {
    Observable_1.Observable.from([cacheId])
        .flatMap(mosaic => mosaicHttp.getMosaicTransferableWithAmount(mosaic, 10))
        .toArray()
        .map(mosaics => nem_library_1.TransferTransaction.createWithMosaics(nem_library_1.TimeWindow.createWithDeadline(), new nem_library_1.Address('blah'), mosaics, nem_library_1.EmptyMessage));
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2FsbGV0LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsid2FsbGV0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsNkNBR3FCO0FBQ3JCLGdEQUE2QztBQUM3Qyx3QkFBVSxDQUFDLFNBQVMsQ0FBQywwQkFBWSxDQUFDLFFBQVEsQ0FBQyxDQUFDO0FBRTVDLE1BQU0sV0FBVyxHQUFHLGNBQWMsQ0FBQztBQUNuQyxNQUFNLFNBQVMsR0FBRyxXQUFXLENBQUM7QUFDOUIsTUFBTSxLQUFLLEdBQUcsT0FBTyxDQUFDO0FBQ3RCLE1BQU0sT0FBTyxHQUFHLElBQUksc0JBQVEsQ0FBQyxTQUFTLEVBQUUsS0FBSyxDQUFDLENBQUM7QUFDL0MsTUFBTSxVQUFVLEdBQUcsSUFBSSx3QkFBVSxFQUFFLENBQUM7QUFFdkIsUUFBQSxpQkFBaUIsR0FBRyxDQUFDLE9BQWdCLEVBQTBCLEVBQUU7SUFDN0UsTUFBTSxDQUFDLElBQUksT0FBTyxDQUFnQixDQUFDLE9BQU8sRUFBRSxNQUFNLEVBQUUsRUFBRTtRQUNyRCxNQUFNLFdBQVcsR0FBRyxJQUFJLHlCQUFXLEVBQUUsQ0FBQztRQUN0QyxXQUFXLENBQUMsdUJBQXVCLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxDQUFDLFNBQVMsQ0FBQyxPQUFPLENBQUMsRUFBRTtZQUN4RSxNQUFNLFdBQVcsR0FBRyxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUMsTUFBTSxFQUFFLEVBQUU7Z0JBQzNDLE1BQU0sQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLElBQUksS0FBSyxLQUFLLENBQUE7WUFDdEMsQ0FBQyxDQUFDLENBQUM7WUFDSCxFQUFFLENBQUMsQ0FBQyxDQUFDLFdBQVcsQ0FBQztnQkFBQyxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUM7WUFDaEMsT0FBTyxDQUFDLFdBQVcsQ0FBQyxDQUFDO1FBQ3RCLENBQUMsRUFBRSxLQUFLLENBQUMsRUFBRTtZQUNWLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUNmLENBQUMsQ0FBQyxDQUFDO0lBQ0osQ0FBQyxDQUFDLENBQUM7QUFDSixDQUFDLENBQUM7QUFFVyxRQUFBLGtCQUFrQixHQUFHLENBQUMsUUFBZ0IsRUFBZ0IsRUFBRTtJQUNwRSxNQUFNLElBQUksR0FBRyxJQUFJLHNCQUFRLENBQUMsUUFBUSxDQUFDLENBQUM7SUFDcEMsTUFBTSxDQUFDLDBCQUFZLENBQUMsTUFBTSxDQUFDLFdBQVcsRUFBRSxJQUFJLENBQUMsQ0FBQztBQUMvQyxDQUFDLENBQUM7QUFFVyxRQUFBLFNBQVMsR0FBRyxHQUFHLEVBQUU7SUFDN0IsdUJBQVUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQztTQUN4QixPQUFPLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxVQUFVLENBQUMsK0JBQStCLENBQUMsTUFBTSxFQUFFLEVBQUUsQ0FBQyxDQUFDO1NBQ3pFLE9BQU8sRUFBRTtTQUNULEdBQUcsQ0FBQyxPQUFPLENBQUMsRUFBRSxDQUFDLGlDQUFtQixDQUFDLGlCQUFpQixDQUNwRCx3QkFBVSxDQUFDLGtCQUFrQixFQUFFLEVBQy9CLElBQUkscUJBQU8sQ0FBQyxNQUFNLENBQUMsRUFDbkIsT0FBTyxFQUNQLDBCQUFZLENBQUMsQ0FBQyxDQUFBO0FBRWpCLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG5cdEFjY291bnQsIEFkZHJlc3MsIEVtcHR5TWVzc2FnZSwgTW9zYWljSHR0cCwgTW9zYWljSWQsIE5FTUxpYnJhcnksIE5ldHdvcmtUeXBlcywgUGFzc3dvcmQsIFNpbXBsZVdhbGxldCwgVGltZVdpbmRvdyxcblx0VHJhbnNmZXJUcmFuc2FjdGlvbiwgQWNjb3VudEh0dHAsIE1vc2FpY1xufSBmcm9tICduZW0tbGlicmFyeSc7XG5pbXBvcnQgeyBPYnNlcnZhYmxlIH0gZnJvbSAncnhqcy9PYnNlcnZhYmxlJztcbk5FTUxpYnJhcnkuYm9vdHN0cmFwKE5ldHdvcmtUeXBlcy5URVNUX05FVCk7XG5cbmNvbnN0IFdBTExFVF9OQU1FID0gJ2NhY2hlIHdhbGxldCc7XG5jb25zdCBuYW1lc3BhY2UgPSAnZGV2c2xvcGVzJztcbmNvbnN0IGNhY2hlID0gJ2NhY2hlJztcbmNvbnN0IGNhY2hlSWQgPSBuZXcgTW9zYWljSWQobmFtZXNwYWNlLCBjYWNoZSk7XG5jb25zdCBtb3NhaWNIdHRwID0gbmV3IE1vc2FpY0h0dHAoKTtcblxuZXhwb3J0IGNvbnN0IGdldEFjY291bnRCYWxhbmNlID0gKGFjY291bnQ6IEFjY291bnQpOiBQcm9taXNlPE1vc2FpYyB8IG51bGw+ID0+IHtcblx0cmV0dXJuIG5ldyBQcm9taXNlPE1vc2FpYyB8IG51bGw+KChyZXNvbHZlLCByZWplY3QpID0+IHtcblx0XHRjb25zdCBhY2NvdW50SHR0cCA9IG5ldyBBY2NvdW50SHR0cCgpO1xuXHRcdGFjY291bnRIdHRwLmdldE1vc2FpY093bmVkQnlBZGRyZXNzKGFjY291bnQuYWRkcmVzcykuc3Vic2NyaWJlKG1vc2FpY3MgPT4ge1xuXHRcdFx0Y29uc3QgY2FjaGVNb3NhaWMgPSBtb3NhaWNzLmZpbmQoKG1vc2FpYykgPT4ge1xuXHRcdFx0XHRyZXR1cm4gbW9zYWljLm1vc2FpY0lkLm5hbWUgPT09IGNhY2hlXG5cdFx0XHR9KTtcblx0XHRcdGlmICghY2FjaGVNb3NhaWMpIHJlc29sdmUobnVsbCk7XG5cdFx0XHRyZXNvbHZlKGNhY2hlTW9zYWljKTtcblx0XHR9LCBlcnJvciA9PiB7XG5cdFx0XHRyZWplY3QoZXJyb3IpO1xuXHRcdH0pO1xuXHR9KTtcbn07XG5cbmV4cG9ydCBjb25zdCBjcmVhdGVTaW1wbGVXYWxsZXQgPSAocGFzc3dvcmQ6IHN0cmluZyk6IFNpbXBsZVdhbGxldCA9PiB7XG5cdGNvbnN0IHBhc3MgPSBuZXcgUGFzc3dvcmQocGFzc3dvcmQpO1xuXHRyZXR1cm4gU2ltcGxlV2FsbGV0LmNyZWF0ZShXQUxMRVRfTkFNRSwgcGFzcyk7XG59O1xuXG5leHBvcnQgY29uc3Qgc2VuZENhY2hlID0gKCkgPT4ge1xuXHRPYnNlcnZhYmxlLmZyb20oW2NhY2hlSWRdKVxuXHRcdC5mbGF0TWFwKG1vc2FpYyA9PiBtb3NhaWNIdHRwLmdldE1vc2FpY1RyYW5zZmVyYWJsZVdpdGhBbW91bnQobW9zYWljLCAxMCkpXG5cdFx0LnRvQXJyYXkoKVxuXHRcdC5tYXAobW9zYWljcyA9PiBUcmFuc2ZlclRyYW5zYWN0aW9uLmNyZWF0ZVdpdGhNb3NhaWNzKFxuXHRcdFx0VGltZVdpbmRvdy5jcmVhdGVXaXRoRGVhZGxpbmUoKSxcblx0XHRcdG5ldyBBZGRyZXNzKCdibGFoJyksXG5cdFx0XHRtb3NhaWNzLFxuXHRcdFx0RW1wdHlNZXNzYWdlKSlcblxufTsiXX0=